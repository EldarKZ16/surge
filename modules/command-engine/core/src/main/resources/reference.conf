akka {
  actor {
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
    }
     serialization-bindings {
      "surge.akka.cluster.JacksonSerializable" = jackson-cbor
    }
  }
  serialization.jackson.jackson-modules += "com.fasterxml.jackson.module.kotlin.KotlinModule"
}

kafka {
  publisher {
    # The Kafka publisher for a partition batches messages together into transactions for all or nothing guarentees as well as
    # better throughput.  The publisher will flush any received requests to publish state/events on this interval in a single
    # transaction.  Increasing will give better throughput but higher average latency.  It is not recommended to decrease this
    # as Kafka transactions add a small amount of overhead per transaction and a smaller interval would increase the impact of
    # transaction overhead on commits to Kafka.
    flush-interval = 50 ms
    flush-interval = ${?KAFKA_PUBLISHER_FLUSH_INTERVAL}

    // TODO these are different than the Kafka defaults, we may want to revisit later down the line
    batch-size = 100000
    batch-size = ${?KAFKA_PUBLISHER_BATCH_SIZE}

    linger-ms = 5
    linger-ms = ${?KAFKA_PUBLISHER_LINGER_MS}

    compression-type = "lz4"
    compression-type = ${?KAFKA_PUBLISHER_COMPRESSION_TYPE}

    acks = "all"
    acks = ${?KAFKA_PUBLISHER_ACKS}

    transaction-timeout-ms = 60000
    transaction-timeout-ms = ${?KAFKA_PUBLISHER_TRANSACTION_TIMEOUT_MS}
  }
}

# Separate thread pool for the Kafka publisher actor
kafka-publisher-actor-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 32
  }
  throughput = 1
}

# Separate thread pool for the aggregate actors
generic-aggregate-actor-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 64
  }
  throughput = 1
}
