kafka {
  publisher {
    # The Kafka publisher for a partition batches messages together into transactions for all or nothing guarentees as well as
    # better throughput.  The publisher will flush any received requests to publish state/events on this interval in a single
    # transaction.  Increasing will give better throughput but higher average latency.  It is not recommended to decrease this
    # as Kafka transactions add a small amount of overhead per transaction and a smaller interval would increase the impact of
    # transaction overhead on commits to Kafka.
    flush-interval = 50 ms
    flush-interval = ${?KAFKA_PUBLISHER_FLUSH_INTERVAL}
  }
}

ulti {
  aggregate-actor {
    # Amount of time to keep an aggregate in memory if new commands for that aggregate are not being sent/processed.
    # It is recommended to keep this value higher than your setting for kafka.streams.commit-interval-ms, otherwise
    # quickly sending messages to an actor no longer in memory could incur a delay in actor initialization.
    idle-timeout = 30 seconds
    idle-timeout = ${?AGGREGATE_ACTOR_IDLE_TIMEOUT}

    # Amount of time to wait when sending a command to an aggregate before considering it to be timed out.
    ask-timeout = 30 seconds
    ask-timeout = ${?AGGREGATE_ACTOR_ASK_TIMEOUT}
  }

  # The sequence number to start from when using the ulti event envelope format.  This should remain at 1, as that
  # is the default according to the messaging standard.
  messaging {
    initial-sequence-number = 1
  }
}

# Separate thread pool for the Kafka publisher actor
kafka-publisher-actor-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 32
  }
  throughput = 1
}

# Separate thread pool for the aggregate actors
generic-aggregate-actor-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 64
  }
  throughput = 1
}
