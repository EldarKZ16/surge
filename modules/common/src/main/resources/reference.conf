kafka {
  streams {
    # Clean up any Kafka Streams persistent state on startup, causing a full repopulation of any persisted state stores.
    # This is mostly useful if you manually change something in Kafka and Kafka Streams does not know how to pick up
    # where it left off - i.e. changing number of partitions, deleting and recreating a topic, manually changing
    # consumer offsets for this services consumer group, etc...
    wipe-state-on-start = false
    wipe-state-on-start = ${?KAFKA_STREAMS_CLEAN_ON_START}

    # Kafka streams commit interval. Kafka Streams will wait a max of this amount of time before committing results/flushing
    # KTables. In general, this is the delay an application will see before a state snapshot written to Kafka becomes available
    # in the aggregate state store KTable.  Increasing this gives better throughput but improves latency, decreasing gives lower
    # latency but worse throughput.
    commit-interval-ms = 3000
    commit-interval-ms = ${?KAFKA_STREAMS_COMMIT_INTERVAL_MS}

    # Number of standby replicas of state stores/Kafka Streams processors to keep. Additional standbys use
    # additional resources, but allow for better fault tolerance
    num-standby-replicas = 0
    num-standby-replicas = ${?KAFKA_STREAMS_NUM_STANDBY_REPLICAS}

    # Percent of on-heap memory to use for the Kafka Streams cache
    cache-heap-percentage = 0.25
    cache-heap-percentage = ${?KAFKA_STREAMS_CACHE_HEAP_PERCENT}

    # TODO If we run mutliple integration tests on one node at the same time, Kafka Streams crashes because it can't get exclusive
    #      ownership of the state store directories.  Setting this to true will set a random consumer group for each instance so they each
    #      get their own state directory.  Is this config setting the best way to do this?
    test-mode = false

    # RocksDB is the underlying backing for the aggregate KTable state store.  You can tune performance of the
    # state store by tuning rocksdb.  The defaults for these are generally ok, and it is recommended to enable
    # dumping statistics to get a better view of the underlying performance before and while tuning settings here.
    rocks-db {
      # Number of concurrent compactions that should be run in parallel by rocksdb
      compaction-parallelism = 2
      compaction-parallelism = ${?KAFKA_STREAMS_ROCKSDB_COMPACTION_PARALLELISM}

      # Used for debug and performance tuning, setting this to true will cause rocksdb to print
      # performance statistics to a log file in the same directory as rocksdb uses to spill sstfiles to disk
      dump-statistics = false
      dump-statistics = ${?KAFKA_STREAMS_ROCKSDB_DUMP_STATISTICS}

      # If dump-statistics is true, this is the interval at which statistics will be dumped by
      # rocksdb to the log file
      statistics-interval-seconds = 600
      statistics-interval-seconds = ${?KAFKA_STREAMS_ROCKSDB_STATISTICS_INTERVAL_SECONDS}
    }
  }
}
